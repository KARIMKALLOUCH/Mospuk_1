<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AABQjQ8AUI0PBlCNDxBQjQ8QUI0PEFCNDxBQjQ8QUI0PEFCNDxBQjQ8QUI0PEFCNDxBQjQ8QUI0PEFCN
        DxBQjQ8QUI0PEFCNDxBQjQ8QUI0PEFCNDxBQjQ8QUI0PEFCNDxBQjQ8QUI0PEFCNDxBQjQ8QUI0PEFCN
        Dw9QjQ8DUI0PAFCNDxxQjQ+cUI0PyVCND8hQjQ/IUI0PyFCND8hQjQ/IUI0PyFCND8hQjQ/IUI0PyFCN
        D8hQjQ/IUI0PyFCND8hQjQ/IUI0PyFCND8hQjQ/IUI0PyFCND8hQjQ/IUI0PyFCND8hQjQ/IUI0PyFCN
        D8hQjQ/IUI0Px1CND3tQjQ8IUI0PZVCND/tQjQ//UI0P/1CND/9QjQ//UI0P/1CND/9QjQ//UI0P/1CN
        D/9QjQ//UI0P/1CND/9QjQ//UI0P/1CND/9QjQ//UI0P/1CND/9QjQ//UI0P/1CND/9QjQ//UI0P/1CN
        D/9QjQ//UI0P/1CND/9QjQ//UI0P5FCNDytQjQ9wUI0P/VCND/9QjQ//UI0P/1CND/9QjQ//UI0P/1CN
        D/9QjQ//UI0P/1CND/9QjQ//UI0P/1CND/9QjQ//UI0P/1CND/9QjQ//UI0P/1CND/9QjQ//UI0P/1CN
        D/9QjQ//UI0P/1CND/9QjQ//UI0P/1CND/9QjQ/oUI0PMFCND3BQjQ/9T40O/06LDP9PjA3/TowM/0+M
        Df9OjAz/T4wO/02LC/9Niwv/TowN/1CNDv9Niwv/TYsL/06MDP9PjA7/TosM/1CND/9QjQ//UI0P/06M
        DP9Niwv/TYsL/0+NDv9OjAz/T4wO/0+MDf9OjAz/UI0P/1CND+hQjQ8wUI0PcE+NDv1clSD/ibNe/2uf
        NP9+q07/c6Q//3+sT/9flyT/krhp/5q+df9xojz/WJIa/4u0YP+cv3f/eqlJ/2GYJ/+Jsl7/VpEY/1CN
        Dv9RjhD/eahI/5y/d/+MtGL/XJUf/4awWf9onTD/bqA4/4iyXP9TjxP/UI0P6FCNDzBQjQ9wTowM/W6h
        OP/a583/psWF/9nmyv+uypD/wNap/5y/d//m793/1eTG/8nctf+Jsl7/6fHi/9Dhv//a6M3/iLJc/9nm
        yv9flyT/TIsK/16WIv/c6M//2ObJ/+ry4v+OtmT/0eHA/5S5bP/D2a7/rMmN/1CND/9QjQ/oUI0PMFCN
        D3BOjAz9bqE4/9vozv/G2rD/6fHh/8XZr/++1af/qsiK/7bQm/9/q0//0eHB/3amQ/+PtmX/h7Fa/9/q
        0/+NtWP/6fHh/8HXq/+dv3n/baA2/97q0v99qkz/yt23/5u+df/Q4b//1eTG/9vozv9pnTH/TowN/1CN
        D+hQjQ8wUI0PcE6MDP1uoDj/5e7b/9flyf+91KX/5e/c/77Vpv+qyIr/tc+Z/32rTf/R4cD/d6ZE/8LY
        q//e6tH/vNSk/4OuVf/l79z/ttCb/+Xu2/+Ks17/3OnP/3qpSf/J3LX/mr51/9Hiwf//////sMyT/0+M
        Df9QjQ//UI0P6FCNDzBQjQ9wTowM/W2gN//x9uz/0eHB/4exWv/4+/b/v9ao/6rIiv+20Jv/fqtP/9Dg
        vv+XvHH/3enQ/4OuVf+Vum3/gq1T/9fmyf9snzX/1uTG/4+2Zv/b6M//e6lJ/8nctf+avnX/z+C9/93p
        0f/L3rj/WpQd/0+MDv9QjQ/oUI0PMFCND3BOjAz9baA3//P37/+xzZX/Ypko/+nx4f/B16r/nb95/+Xv
        3P/U5MX/ydy2/4mzXv/o8N//zuC8/9zpz/+HsVv/6vLj/83euv/l79z/hrBZ/93p0P97qUr/ydy1/5u+
        dv/Q4L7/nb95/9HhwP+YvHL/TowN/1CND+hQjQ8wUI0PcE+MDv1clSD/lrtu/3CiOv9SjhH/i7Nf/4Gt
        U/9gmCX/lbpu/57Aev9zpD7/WJIa/462ZP+fwXz/fKpM/2GYJ/+YvXL/n8F8/4axWv9dlSH/jbVi/2KZ
        J/+Er1b/cKI6/4exW/9pnjL/daVC/4WwWP9RjhH/UI0P6FCNDzBQjQ9wUI0P/VCNDv9Niwv/T4wN/1CN
        D/9Oiwz/TowM/0+MDv9Niwv/TYsL/06LDP9OjAz/S4oI/0qJB/9Ligj/TIsK/0uJB/9Ligj/TIsK/0+M
        Dv9Oiwz/T40O/06MDP9PjA3/TowM/0+MDv9OjA3/TowM/1CND/9QjQ/oUI0PMFCND3BQjQ/9UI0P/1CN
        D/9QjQ//UI0P/1CND/9QjQ//UI0O/06LDP9PjA7/WJIb/2ecMP93pkX/gq1V/4iwXP+Hr1v/f6tR/3Ki
        Pv9imCj/VJAV/06MDP9OjA3/UI0P/1CND/9QjQ//UI0P/1CND/9QjQ//UI0P/1CND+hQjQ8wUI0PcFCN
        D/1QjQ//UI0P/1CND/9QjQ//UI0P/06MDP9Xkhn/fKlN/6vHjv/P3cD/5Ord/+7x6//y8/D/9PTy//Ly
        8P/u8Or/6e7j/9/n1f/F17L/nL15/22fOP9RjhH/T4wN/1CND/9QjQ//UI0P/1CND/9QjQ//UI0P6FCN
        DzBQjQ9wUI0P/VCND/9QjQ//UI0P/1CNDv9RjRD/fKlM/8bXs//u8ev/+Pf4//n4+f/w8u7/8PLt//f3
        9//w8O//7O3q/9vZ1P/W1M3/6+rn//f39v/29vb/5eve/6/Jk/9nmy7/TowN/1CND/9QjQ//UI0P/1CN
        D/9QjQ/oUI0PMFCND3BQjQ/9UI0P/1CND/9QjQ//UY4R/5W5b//q7uT/+Pf4//b29f/29vX/3uHa/77O
        rf+JsF//y9i7/+bo5P/f3tn/ysfA/8rHv//MycL/2tnT/+3u6v/39/f/9/f4/9bhyf90pEH/T4wN/1CN
        D/9QjQ//UI0P/1CND+hQjQ8wUI0PcFCND/1QjQ//UI0P/06MDP9/q1D/7O/n//f29v/z9PH/scmX/5Gi
        f/9xgl//Tm4r/0yHDv9cjyb/ydO8/9HNyP/Kx7//ysfA/8rHwP/Jxr//2djQ/9bjyf/v8ev/+Pf5/9He
        wv9glyX/T4wO/1CND/9QjQ//UI0P6FCNDzBQjQ9wUI0P/VCND/9QjQ//UY4Q/7jPoP/39vf/9fT0/9zm
        0v97pU7/MEwT/ytCE/8uUgf/SIAL/2KULf/U38j/0NPE/8vIwP/Kx8D/yse//9fUz//G1LT/b6A7/73S
        pv/29vb/9PTy/4mxXv9Niwv/UI0P/1CND/9QjQ/oUI0PMFCND3BQjQ/9UI0P/1CND/9TjxP/wdOt/+rp
        6//t7u3/6+7o/6a8jv9EWS7/LEMU/zFUCv9Degr/eKRJ/9rmzf/E2K//2N3N/83Kw//MycL/5Obe/5mz
        ff+Eq1r/k7dr//Hy7v/29vb/k7ds/02LC/9QjQ//UI0P/1CND+hQjQ8wUI0PcFCND/1QjQ//UI0P/0+M
        Df+YuHX/4uHi/+zs6//y8vH/6evm/2h0W/8vRhf/M1YN/0B0CP+Cq1f/2ubM/9Dhv//h5dj/zMnC/9XT
        zf/a4tD/qr6U/+Hm2//X4cz/8vPw/+jt4v9yoj7/TowM/1CND/9QjQ//UI0P6FCNDzBQjQ9wUI0P/VCN
        D/9QjQ//TowM/3GgP//b3tj/7e3s//Hy8f/w8e//bnli/zRKHf82WRH/P3EJ/2qZOP/F2bD/5e7b/+Tl
        3v/Kxr//09bI/8DUqv/v7+3/5OTl/+/v8P/w8e7/nr58/1GOEP9QjQ//UI0P/1CND/9QjQ/oUI0PMFCN
        D3BQjQ/9UI0P/1CND/9OjAz/b588/9re1//s7ez/8PHw//Dw8P9yfWf/OU4i/ztdF/89bgj/Wocq/5+9
        fv+ryIz/0tvE/8/Lxv/M1L3/j7Vl/+nr5v/i4eL/7u7u/9/m1/9kmSv/TowN/1CND/9QjQ//UI0P/1CN
        D+hQjQ8wUI0PcFCND/1QjQ//UI0P/06MDP9vnz3/2dzW/+rq6v/w8e7/0t3F/2t5XP85TyP/S2Yu/0Jq
        GP9hhzr/1NbK/7K9m/+YtnX/sMaV/8LTrf9uoDj/yti8/+jn6P/x8fH/3+bX/2OZKv9PjA3/UI0P/1CN
        D/9QjQ//UI0P6FCNDzBQjQ9wUI0P/VCND/9QjQ//TowM/3CgPv/c3tn/6Ojo//Hx8f+1zJ3/PWEY/zxO
        Kf9CWCr/P1Uo/2l+U//a3NL/zcrE/8XEuP+qu4//irBg/1aRGP9pnDL/utCj/+3w6f/E1rL/XJQg/0+N
        Dv9QjQ//UI0P/1CND/9QjQ/oUI0PMFCND3BQjQ/9UI0P/1CND/9PjA3/ZZkt/87bwP/09PT/4ufd/4Cr
        Uv9Lhgz/P24N/014IP9HYSv/X21Q/+Dn2P/h5tj/1NLK/8vHwf/JzLz/ha9Y/0yLCv9WkRf/dqVE/2CX
        Jf9QjQ//UI0P/1CND/9QjQ//UI0P/1CND+hQjQ8wUI0PcFCND/1QjQ//UI0P/1CND/9QjQ//ZJoq/5y9
        eP+BrFP/Uo4R/1CND/9Rjg//UI0O/06IEf9ylkz/5Ozc/+jw3//j59z/zMjB/9fU0P+avHX/TYsL/1CN
        Dv9OjAz/T4wO/1CND/9QjQ//UI0P/1CND/9QjQ//UI0P6FCNDzBQjQ9wUI0P/VCND/9QjQ//UI0P/1CN
        D/9PjA3/TowM/06MDP9QjQ//UI0P/1CND/9QjQ//T4wN/1+XI/++1aX/6vLj/+fq4f/LyMH/19TP/5m8
        dP9Niwv/UI0P/1CND/9QjQ//UI0P/1CND/9QjQ//UI0P/1CND/9QjQ/oUI0PMFCND3BQjQ/9UI0P/1CN
        D/9QjQ//UI0P/1CND/9QjQ//UI0P/1CND/9QjQ//UI0P/1CND/9QjQ//T4wO/1eSGf+MtWH/ztu9/9DO
        x//Y1ND/mbx0/02LC/9QjQ//UI0P/1CND/9QjQ//UI0P/1CND/9QjQ//UI0P/1CND+hQjQ8wUI0PbFCN
        D/1QjQ//UI0P/1CND/9QjQ//UI0P/1CND/9QjQ//UI0P/1CND/9QjQ//UI0P/1CND/9QjQ//T40O/06L
        DP9gmCX/mbl1/9TayP+avHX/TYsL/1CND/9QjQ//UI0P/1CND/9QjQ//UI0P/1CND/9QjQ//UI0P51CN
        Dy9QjQ8xUI0PyFCND+1QjQ/sUI0P7FCND+xQjQ/sUI0P7FCND+xQjQ/sUI0P7FCND+xQjQ/sUI0P7FCN
        D+xQjQ/sUI0P7E+MDexPjQ7scaM87HGjPOxPjA7sUI0P7FCND+xQjQ/sUI0P7FCND+xQjQ/sUI0P7FCN
        D+1QjQ+mUI0PEU+NDgBQjQ8dUI0PN1CNDzdQjQ83UI0PN1CNDzdQjQ83UI0PN1CNDzdQjQ83UI0PN1CN
        DzdQjQ83UI0PN1CNDzdQjQ83UI0PN1CNDjdHhwU3SYkIN1CNDzdQjQ83UI0PN1CNDzdQjQ83UI0PN1CN
        DzdQjQ83UI0PNVCNDxJQjQ8AgAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAE=
</value>
  </data>
</root>